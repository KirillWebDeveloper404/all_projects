"""
—Ç—É—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–µ –∏—Ö
"""

import calendar as clndr
import copy
from datetime import date
from typing import List, Union

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, user
from aiogram.utils.callback_data import CallbackData

from loader import scheduler
from modules import DataBase as db
from modules.DataBase import get_user_rate

client_main = ReplyKeyboardMarkup(resize_keyboard=True)
client_main.row(KeyboardButton("üßò –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è"), KeyboardButton("üõç –ú–∞–≥–∞–∑–∏–Ω"))
client_main.row(KeyboardButton("‚ú® –û —à–∫–æ–ª–µ"), KeyboardButton("üÜò –ü–æ–º–æ—â—å"))

client_main_admin = ReplyKeyboardMarkup(resize_keyboard=True)
client_main_admin.row(KeyboardButton("üßò –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è"), KeyboardButton("üõç –ú–∞–≥–∞–∑–∏–Ω"))
client_main_admin.row(KeyboardButton("‚ú® –û —à–∫–æ–ª–µ"), KeyboardButton("üÜò –ü–æ–º–æ—â—å"))
client_main_admin.row(KeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞"))

subscribe_inst = InlineKeyboardMarkup()
subscribe_inst.add(
    InlineKeyboardButton(
        "üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º", url="https://www.instagram.com/p/CHIxKyDhZCR/?igshid=1p94vkwswnzcc"
    )
)
subscribe_inst.add(InlineKeyboardButton("üì∫ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –≤–∏–¥–µ–æ", callback_data="collection_1"))
subscribe_inst.add(InlineKeyboardButton("üë£ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤ 5 —à–∞–≥–æ–≤", callback_data="free_intensive_start"))
subscribe_inst.add(InlineKeyboardButton("‚≠êÔ∏è –ü–ª–∞—Ç–Ω—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤ –Ø –ñ–ò–í–ê!", callback_data="pay_intensive_start"))

questionnaire_1 = InlineKeyboardMarkup()
questionnaire_1.row(
    InlineKeyboardButton(
        "üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º", url="https://www.instagram.com/p/CHIxKyDhZCR/?igshid=1p94vkwswnzcc"
    )
)
questionnaire_1.row(InlineKeyboardButton("üîé –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="questionnaire_1"))

questionnaire_april = InlineKeyboardMarkup()
questionnaire_april.row(
    InlineKeyboardButton(
        "üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∏–Ω—Å—Ç–∞–≥—Ä–∞–º", url="https://www.instagram.com/p/CHIxKyDhZCR/?igshid=1p94vkwswnzcc"
    )
)
questionnaire_april.row(InlineKeyboardButton("üîé –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="questionnaire_april_1"))


def gen_client_main():
    kb = copy.deepcopy(client_main)
    return kb


# faq buttons
client_help = InlineKeyboardMarkup()
client_help.row(InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="help_write_to_help"))
client_help.row(InlineKeyboardButton(text="üíµ –ù–µ –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="help_write_to_help"))
client_help.row(InlineKeyboardButton(text="‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="help_freeze"))
client_help.row(InlineKeyboardButton(text="ü§∑‚Äç‚ôÄÔ∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å–µ—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="help_write_to_help"))
client_help.row(
    InlineKeyboardButton(text="üëÄ –ö–∞–∫ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É", callback_data="help_write_to_help")
)

# user account

client_cabinet = InlineKeyboardMarkup(row_width=2)
client_cabinet.row(InlineKeyboardButton("üõí –ü–æ–∫—É–ø–∫–∏", callback_data="client_cabinet_shop"))
client_cabinet.row(InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É", callback_data="client_cabinet_curator"))
# client_lk.row(InlineKeyboardButton("üè¶ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="client_cabinet_transactions"))


activate_lk = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", callback_data="activate_lk")]]
)

get_number = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)], [KeyboardButton("¬´ –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
)


def client_lk_gen(is_admin):
    ret = copy.deepcopy(client_cabinet)
    if is_admin:
        ret.row(InlineKeyboardButton("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_main"))
    return ret


client_passw_verify = ReplyKeyboardMarkup(one_time_keyboard=True).add(
    KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
)


def gen_client_timetable():
    client_timetable = InlineKeyboardMarkup()
    client_timetable.row(
        InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data="timetable_free_classes"),
        InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="timetable_calendar"),
    )
    for tchr in db.get_teachers():
        if tchr.tg_id is not None:
            client_timetable.row(
                InlineKeyboardButton(tchr.name, callback_data="timetable_teacherbutton:" + tchr.phone_number)
            )
    return client_timetable


def days_of_week():
    return [InlineKeyboardButton(d, callback_data="no") for d in ("–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å")]


def gen_month_for_admin(chat, dt):
    ret = InlineKeyboardMarkup(row_width=7)
    ret.add(InlineKeyboardButton(f"{month_from_num(dt.month)} {dt.year}", callback_data="no"))
    ret.row(*days_of_week())
    dt = date(dt.year, dt.month, 1)
    max_day = clndr.monthrange(dt.year, dt.month)[1]
    day = 1
    for i in range(dt.weekday()):
        ret.insert(InlineKeyboardButton(" ", callback_data="no"))
    for i in range(dt.weekday(), 7):
        if db.get_events_by_date(date(dt.year, dt.month, day)):
            ret.insert(InlineKeyboardButton("|" + str(day) + "|", callback_data=f"dt_admin{dt.year}.{dt.month}.{day}"))
        else:
            ret.insert(InlineKeyboardButton(str(day), callback_data=f"dt_admin{dt.year}.{dt.month}.{day}"))
        day += 1
    dy = day
    for i in range(4 * 7):
        if dy != " " and db.get_events_by_date(date(dt.year, dt.month, dy)):
            ret.insert(InlineKeyboardButton("|" + str(dy) + "|", callback_data=f"dt_admin{dt.year}.{dt.month}.{day}"))
        else:
            ret.insert(InlineKeyboardButton(str(dy), callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        if day < max_day:
            day += 1
            dy += 1
        else:
            dy = " "
    ret.row(
        InlineKeyboardButton("<", callback_data=f"dtprev_month_for_admin:{chat}:{dt.year}.{dt.month}"),
        InlineKeyboardButton("   ", callback_data="no"),
        InlineKeyboardButton(">", callback_data=f"dtnext_month_for_admin:{chat}:{dt.year}.{dt.month}"),
    )
    return ret


def gen_month_for_teacher(chat, dt, user_id):
    ret = InlineKeyboardMarkup(row_width=7)
    ret.add(InlineKeyboardButton(f"{month_from_num(dt.month)} {dt.year}", callback_data="no"))
    ret.row(*days_of_week())
    dt = date(dt.year, dt.month, 1)
    max_day = clndr.monthrange(dt.year, dt.month)[1]
    day = 1
    for i in range(dt.weekday()):
        ret.insert(InlineKeyboardButton(" ", callback_data="no"))
    for i in range(dt.weekday(), 7):
        if db.get_events_by_teacher(date(dt.year, dt.month, day), user_id):
            ret.insert(
                InlineKeyboardButton("|" + str(day) + "|", callback_data=f"dt_teacher{dt.year}.{dt.month}.{day}")
            )
        else:
            ret.insert(InlineKeyboardButton(str(day), callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        day += 1
    dy = day
    for i in range(4 * 7):
        if dy != " " and db.get_events_by_teacher(date(dt.year, dt.month, dy), user_id):
            ret.insert(InlineKeyboardButton("|" + str(dy) + "|", callback_data=f"dt_teacher{dt.year}.{dt.month}.{day}"))
        else:
            ret.insert(InlineKeyboardButton(str(dy), callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        if day < max_day:
            day += 1
            dy += 1
        else:
            dy = " "
    ret.row(
        InlineKeyboardButton("<", callback_data=f"dtprev_month_for_teacher:{chat}:{dt.year}.{dt.month}"),
        InlineKeyboardButton("   ", callback_data="no"),
        InlineKeyboardButton(">", callback_data=f"dtnext_month_for_teacher:{chat}:{dt.year}.{dt.month}"),
    )
    return ret


def gen_month(chat, dt, user_id):
    """
    —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä–∏–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ–ª–±—ç–∫–∞–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–æ–¥—è—Ç —Å–ø–∏—Å–æ–∫
    –∑–∞–Ω—è—Ç–∏–π (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ–∂–µ) –∏ —Å–µ–º–∏–Ω–∞—Ä–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
    –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    dt - –¥–∞—Ç–∞ (–≤–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü –∏ –≥–æ–¥)
    user_id - —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat - –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Å—è—Ü–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ
    """
    ret = InlineKeyboardMarkup(row_width=7)
    ret.add(InlineKeyboardButton(f"{month_from_num(dt.month)} {dt.year}", callback_data="no"))
    ret.row(*days_of_week())
    dt = date(dt.year, dt.month, 1)
    max_day = clndr.monthrange(dt.year, dt.month)[1]
    day = 1
    # insert empty buttons in the beginning of the month when 1st day starts from arbitrary day of week
    for i in range(dt.weekday()):
        ret.insert(InlineKeyboardButton(" ", callback_data="no"))

    for i in range(dt.weekday(), 7):
        user_events = db.get_events_by_client(date(dt.year, dt.month, day), user_id)
        seminars = db.get_seminar_by_date(date(dt.year, dt.month, day))
        emoji = ""
        if user_events:
            emoji = "üßòüèª‚Äç‚ôÄÔ∏è"
        elif seminars:
            emoji = "üìö"

        if user_events or seminars:
            ret.insert(InlineKeyboardButton(f"{day}{emoji}", callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        else:
            ret.insert(InlineKeyboardButton(f"{day}", callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        day += 1
    dy = day
    for i in range(4 * 7):
        # empty cell
        if dy == " ":
            ret.insert(InlineKeyboardButton(str(dy), callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        # user events
        elif db.get_events_by_client(date(dt.year, dt.month, dy), user_id):
            ret.insert(InlineKeyboardButton(f"{dy}üßòüèª‚Äç‚ôÄÔ∏è", callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        # seminars
        elif db.get_seminar_by_date(date(dt.year, dt.month, dy)):
            ret.insert(InlineKeyboardButton(f"{dy}üìö", callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        # date without events or seminars
        else:
            ret.insert(InlineKeyboardButton(str(dy), callback_data=f"dt{dt.year}.{dt.month}.{day}"))
        if day < max_day:
            day += 1
            dy += 1
        else:
            dy = " "
    ret.row(
        InlineKeyboardButton("<", callback_data=f"dtprev_month:{chat}:{dt.year}.{dt.month}"),
        InlineKeyboardButton("   ", callback_data="no"),
        InlineKeyboardButton(">", callback_data=f"dtnext_month:{chat}:{dt.year}.{dt.month}"),
    )
    return ret


def gen_month_date_chose(chat, dt):
    ret = InlineKeyboardMarkup(row_width=7)
    ret.add(InlineKeyboardButton(f"{month_from_num(dt.month)} {dt.year}", callback_data="no"))
    ret.row(*days_of_week())
    dt = date(dt.year, dt.month, 1)
    max_day = clndr.monthrange(dt.year, dt.month)[1]
    day = 1
    for i in range(dt.weekday()):
        ret.insert(InlineKeyboardButton(" ", callback_data="no"))
    for i in range(dt.weekday(), 7):
        ret.insert(InlineKeyboardButton(str(day), callback_data=f"choose_date{dt.year}.{dt.month}.{day}"))
        day += 1
    dy = day
    for i in range(4 * 7):
        ret.insert(InlineKeyboardButton(str(dy), callback_data=f"choose_date{dt.year}.{dt.month}.{day}"))
        if day < max_day:
            day += 1
            dy += 1
        else:
            dy = " "
    ret.row(
        InlineKeyboardButton("<", callback_data=f"dtprev_month_date_chose:{chat}:{dt.year}.{dt.month}"),
        InlineKeyboardButton("   ", callback_data="no"),
        InlineKeyboardButton(">", callback_data=f"dtnext_month_date_chose:{chat}:{dt.year}.{dt.month}"),
    )
    return ret


def month_from_num(n):
    months = {
        k: v
        for k, v in zip(
            range(1, 13),
            (
                "–Ø–Ω–≤–∞—Ä—å",
                "–§–µ–≤—Ä–∞–ª—å",
                "–ú–∞—Ä—Ç",
                "–ê–ø—Ä–µ–ª—å",
                "–ú–∞–π",
                "–ò—é–Ω—å",
                "–ò—é–ª—å",
                "–ê–≤–≥—É—Å—Ç",
                "–°–µ–Ω—Ç—è–±—Ä—å",
                "–û–∫—Ç—è–±—Ä—å",
                "–ù–æ—è–±—Ä—å",
                "–î–µ–∫–∞–±—Ä—å",
            ),
        )
    }
    return months[n]


# =========================================Friday Vebinar===============================================

friday_vebinar_data = CallbackData("friday_vebinar", "prefix")

friday_vebinar_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–ë—É–¥—É –≤ 14:00", callback_data=friday_vebinar_data.new(prefix="14-00"))],
        [InlineKeyboardButton("–ë—É–¥—É –≤ 19:00", callback_data=friday_vebinar_data.new(prefix="19-00"))],
    ]
)

# =========================================ADMIN=PANEL===============================================


admin_dt = CallbackData("administrator_panel", "prefix")

admin_main = InlineKeyboardMarkup(row_width=1)
# admin_main.row(
#     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add"),
#     InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list"),
# )

admin_main.row(
    InlineKeyboardButton("‚úÖ –ê–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏", callback_data=admin_dt.new(prefix="auto_funnels")),
    InlineKeyboardButton("üë©‚Äçüíª –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", callback_data=admin_dt.new(prefix="employees")),
)

admin_main.row(
    InlineKeyboardButton("‚ùóÔ∏è–ö–≤–∏–∑—ã", callback_data=admin_dt.new(prefix="tests")),
    InlineKeyboardButton("üë© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=admin_dt.new(prefix="users")),
)
admin_main.row(
    InlineKeyboardButton("üì© –†–∞—Å—Å—ã–ª–∫–∞", callback_data=admin_dt.new(prefix="mailing")),
    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=admin_dt.new(prefix="statistics")),
)
# admin_main.row(InlineKeyboardButton("üé• –ú–µ–¥–∏–∞ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º)", callback_data="admin_section_video"))

# =========================================Keyboards Employees===============================================
employees_dt = CallbackData("manage_employees", "prefix")
employees_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("üôã–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data=admin_dt.new(prefix="administrator_manage"))],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=employees_dt.new(prefix="back"))],
    ]
)

# =========================================Keyboards Mailing===============================================
mailing_kb_dt = CallbackData("mailing_kb", "prefix")
mailing_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("‚ö°Ô∏è–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è", callback_data=mailing_kb_dt.new(prefix="now_send"))],
        [InlineKeyboardButton("üìÜ –ü–æ –¥–∞—Ç–µ", callback_data=mailing_kb_dt.new(prefix="date_send"))],
        [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è", callback_data=mailing_kb_dt.new(prefix="every_send"))],
        [InlineKeyboardButton("üßæ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π", callback_data=admin_dt.new(prefix="list_jobs"))],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=mailing_kb_dt.new(prefix="back"))],
    ]
)

every_mailing_dt = CallbackData("every_mailing", "prefix")
every_mailing = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data=every_mailing_dt.new(prefix="day"))],
        [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data=every_mailing_dt.new(prefix="week"))],
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü", callback_data=every_mailing_dt.new(prefix="month"))],
    ]
)

every_mailing_week_dt = CallbackData("every_mailing_week", "prefix")
every_mailing_week = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data=every_mailing_week_dt.new(prefix="0"))],
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫", callback_data=every_mailing_week_dt.new(prefix="1"))],
        [InlineKeyboardButton("–ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É", callback_data=every_mailing_week_dt.new(prefix="2"))],
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥", callback_data=every_mailing_week_dt.new(prefix="3"))],
        [InlineKeyboardButton("–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É", callback_data=every_mailing_week_dt.new(prefix="4"))],
        [InlineKeyboardButton("–ö–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É", callback_data=every_mailing_week_dt.new(prefix="5"))],
        [InlineKeyboardButton("–ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data=every_mailing_week_dt.new(prefix="6"))],
    ]
)

date_send_kb_dt = CallbackData("date_mailing", "prefix")
date_mailing_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=date_send_kb_dt.new(prefix="ok"))],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=date_send_kb_dt.new(prefix="no"))],
    ]
)
admin_shop_data = CallbackData("administrator_shop", "prefix")
admin_shop = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton("üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=admin_shop_data.new(prefix="category")),
            InlineKeyboardButton("üì¶ –¢–æ–≤–∞—Ä—ã", callback_data=admin_shop_data.new(prefix="products")),
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=admin_shop_data.new(prefix="back")), ],
    ]
)
admin_shop_category_data = CallbackData("administrator_shop_category", "prefix")
shop_category_data = CallbackData('shop_category_data', 'prefix')
admin_shop_category = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add_category"), ],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_category"), ],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=shop_category_data.new(prefix='edit')), ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=admin_shop_category_data.new(prefix="back")), ],
    ]
)

admin_shop_product_data = CallbackData("administrator_shop_product", "prefix")
admin_shop_product = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add_product"), ],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_product"), ],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_product")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=admin_shop_product_data.new(prefix="back")), ],
    ]
)

admin_mailing_data = CallbackData("administarator_mailing_data", "prefix")
admin_course = InlineKeyboardMarkup()
admin_course.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="admin_add_course"), )


async def get_admin_mailing():
    admin_mailing = InlineKeyboardMarkup(row_width=2)
    admin_mailing.row(
        InlineKeyboardButton("–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="all"),
        # InlineKeyboardButton("–ü—Ä–æ—à–µ–¥—à–∏–º –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="entrance_test"),
    )
    # admin_mailing.row(
    #     InlineKeyboardButton("–ù–µ –º–∞–º–∞–º", callback_data="not_moms"),
    #     InlineKeyboardButton("–ë–µ—Ä–µ–º–µ–Ω–Ω—ã–º", callback_data="pregnant"),
    #     InlineKeyboardButton("–ú–∞–º–∞–º", callback_data="moms"),
    # )
    # admin_mailing.row(
    #     InlineKeyboardButton("1—è —Å—Ç–∞–¥–∏—è", callback_data="first_stage"),
    #     InlineKeyboardButton("2—è —Å—Ç–∞–¥–∏—è", callback_data="second_stage"),
    #     InlineKeyboardButton("3—è —Å—Ç–∞–¥–∏—è", callback_data="third_stage"),
    # )
    # admin_mailing.row(
    #     InlineKeyboardButton("–ó–∞–ø—É—Å–∫ –∞–ø—Ä–µ–ª—å", callback_data="april_start"),
    # )
    for product in db.get_segment_products():
        admin_mailing.row(
            InlineKeyboardButton(f"–ù–µ –∫—É–ø–∏–≤—à–∏–µ {product.name}", callback_data=f"not_bought_product_{product.id}")
        )

    for product in db.get_not_deleted_products():
        admin_mailing.row(
            InlineKeyboardButton(f"–ö—É–ø–∏–≤—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç {product.name}", callback_data=f"bought_product_{product.id}")
        )

    for funnel in db.get_all_auto_funnels():
        admin_mailing.row(
            InlineKeyboardButton(f"–≤–æ—Ä–æ–Ω–∫–∞ {funnel.name}", callback_data=f"funnel_{funnel.id}")
        )

    admin_mailing.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=admin_mailing_data.new(prefix="back")))
    return admin_mailing


# ==================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ===========================
admin_manage_dt = CallbackData("administrator_management", "prefix")

admin_manage = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=admin_manage_dt.new(prefix="add"))],
        [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫", callback_data=admin_manage_dt.new(prefix="list"))],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=admin_manage_dt.new(prefix="back"))],
    ]
)

add_admin_panel_not_super = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=admin_manage_dt.new(prefix="back"))], ]
)

list_admin_dt = CallbackData("list_admin", "id", "tg_id", "name", "phone")


async def generate_list_admins_kb(admins: list):
    admins_kb = []
    for admin in admins:

        admins_kb.append(
            [
                InlineKeyboardButton(
                    f"id:{admin.id} name:{admin.name}",
                    callback_data=list_admin_dt.new(
                        id=f"{admin.id}", tg_id=f"{admin.tg_id}", name=f"{admin.name}", phone=f"None"
                    ),
                )
            ]
        )
    admins_kb.append(
        [
            InlineKeyboardButton(
                "¬´ –ù–∞–∑–∞–¥", callback_data=list_admin_dt.new(id="back", tg_id="None", name="None", phone="None")
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=admins_kb)


delete_admin_dt = CallbackData("delete_admin", "prefix", "id", "tg_id", "name", "phone")


async def delete_admin_kb(id_admin, tg_id, name, phone):
    delete_admin_btn = [
        [
            InlineKeyboardButton(
                text="‚ûñ –£–¥–∞–ª–∏—Ç—å",
                callback_data=delete_admin_dt.new(
                    prefix="delete", id=f"{id_admin}", tg_id=tg_id, name=name, phone=phone
                ),
            )
        ],
        [
            InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥",
                callback_data=delete_admin_dt.new(prefix="back", id="None", tg_id=tg_id, name=name, phone=phone),
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=delete_admin_btn)


async def generate_accept_delete_kb(id_admin, tg_id, name, phone):
    delete_admin_btn = [
        [
            InlineKeyboardButton(
                text="–î–∞",
                callback_data=delete_admin_dt.new(
                    prefix="accept_delete", id=f"{id_admin}", tg_id=tg_id, name=name, phone=phone
                ),
            )
        ],
        [
            InlineKeyboardButton(
                text="–ù–µ—Ç",
                callback_data=delete_admin_dt.new(
                    prefix="no_delete", id=f"{id_admin}", tg_id=tg_id, name=name, phone=phone
                ),
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=delete_admin_btn)


admin_all_products = InlineKeyboardMarkup()
for product in db.get_all_products():
    admin_all_products.row(InlineKeyboardButton(product.name, callback_data=f"product_curator_{product.id}"))

not_deleted_products = InlineKeyboardMarkup()
for product in db.get_not_deleted_products():
    not_deleted_products.row(
        InlineKeyboardButton(product.name, callback_data=f"not_deleted_product_curator_{product.id}")
    )


def generate_product_by_curator(curator_id):
    curator_all_products = InlineKeyboardMarkup()
    for products in db.get_products_by_curator(curator_id):
        if products:
            curator_all_products.row(
                InlineKeyboardButton(products.name, callback_data=f"rm_product_by_curator_{products.id}")
            )
    return curator_all_products


# ==================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===========================
statistics_kb = InlineKeyboardMarkup(row_width=1)
statistics_kb.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="statistics_back"))

curator_changes = InlineKeyboardMarkup()
curator_changes_data = CallbackData("curator_changes_data", "prefix")
curator_changes.row(InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_main_curator_list"))
curator_changes.row(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_main_curator_add"))
curator_changes.row(InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="admin_main_curator_delete"))
curator_changes.row(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_main_curator_edit"))
curator_changes.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=curator_changes_data.new(prefix="back")))

media_dt = CallbackData("administrator_media_add", "prefix")

admin_video = InlineKeyboardMarkup(row_width=2)
admin_video.row(
    InlineKeyboardButton("üì∫ –í–∏–¥–µ–æ", callback_data="admin_add_video"),
    InlineKeyboardButton("üéû –ê–Ω–∏–º–∞—Ü–∏—è", callback_data="admin_add_gif"),
)
admin_video.row(
    InlineKeyboardButton("üîà –ê—É–¥–∏–æ", callback_data=media_dt.new(prefix="audio")),
    InlineKeyboardButton("üì∏ –§–æ—Ç–æ", callback_data="admin_add_photo"),
)
admin_video.row(
    InlineKeyboardButton("üóÇ –î–æ–∫—É–º–µ–Ω—Ç", callback_data=media_dt.new(prefix="document")),
)
admin_video.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=media_dt.new(prefix="back")), )
# ==================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ ===========================
free_intensive_data = CallbackData("free_intensive", "filter")

buy_course = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–•–æ—á—É –∫—Ä–∞—Å–∏–≤—ã–π –∂–∏–≤–æ—Ç–∏–∫ üíÉ", url="https://yoga-roggelin.ru/shiva"), ],
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å üò¨", url="https://yoga-roggelin.ru/shiva"), ],
    ]
)
buy_course_2 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–•–æ—á—É –∫—Ä–∞—Å–∏–≤—ã–π –∂–∏–≤–æ—Ç–∏–∫ üíÉ", url="https://yoga-roggelin.ru/shiva")]
    ]
)

intensive_invite = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üëâüèª", callback_data=free_intensive_data.new(filter="start"))]]
)

free_intensive_join_chat = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/joinchat/U7BLXlQbShLy76RS")]]
)

free_intensive_habits = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("—Ç—è–Ω–µ—Ç –Ω–∞ —Å–ª–∞–¥–∫–æ–µ", callback_data=free_intensive_data.new(filter="habits")), ],
        [InlineKeyboardButton("–≤–µ—á–µ—Ä–Ω–∏–π –∂–æ—Ä", callback_data=free_intensive_data.new(filter="habits"))],
        [InlineKeyboardButton("—Ç—è–≥–∞ –∫ –º—É—á–Ω–æ–º—É", callback_data=free_intensive_data.new(filter="habits")), ],
        [InlineKeyboardButton("–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∞—è –ª–µ–Ω—å", callback_data=free_intensive_data.new(filter="habits"))],
    ]
)

free_intensive_vebinar_last = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", url="https://start.bizon365.ru/room/16929/YR__Korset"), ],
    ]
)

free_intensive_vebinar_first = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", url="https://start.bizon365.ru/room/16929/YR_Korset"), ],
    ]
)

free_intensive_korset = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ‚òùÔ∏è", url="https://yoga-roggelin.ru/korsett")]]
)

free_intensive_yashiva = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ‚òùÔ∏è", url="https://yoga-roggelin.ru/shiva")]]
)

free_intensive_habits_2 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("1", callback_data=free_intensive_data.new(filter="habits_2")), ],
        [InlineKeyboardButton("2", callback_data=free_intensive_data.new(filter="habits_2"))],
        [InlineKeyboardButton("3", callback_data=free_intensive_data.new(filter="habits_2"))],
    ]
)
free_intensive_reviews = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data=free_intensive_data.new(filter="reviews")), ],
    ]
)

free_intensive_photo_before_after = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–§–æ—Ç–æ –¥–æ-–ø–æ—Å–ª–µ", callback_data=free_intensive_data.new(filter="reviews_after_before")), ],
    ]
)

about_school = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton("üëâ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à–∫–æ–ª–µ", url="https://yoga-roggelin.ru/")]]
)


# admin_main.row(
#     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="help_add"),
#     InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="help_list"),
# )
# admin_main.add(
#     InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥—ã —É—á–∏—Ç–µ–ª—è–º", callback_data="teachers_show_statistics"),
#     InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ: –π–æ–≥–∞ —Ç—É—Ä", callback_data="help_yoga_tour_desc"),
# )
# admin_main.add(
#     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_add"),
#     InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="promo_list"),
# )
# admin_main.add(
#     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —É—Ä–æ–∫", callback_data="videos_add"),
#     InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —É—Ä–æ–∫–æ–≤", callback_data="videos_editlist"),
# )
# admin_main.add(
#     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∫—É—Ä—Å", callback_data="course_add"),
#     InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –∫—É—Ä—Å–æ–≤", callback_data="course_editlist"),
# )
# admin_main.add(
#     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–∏–Ω–∞—Ä", callback_data="seminar_add"),
#     InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º–∏–Ω–∞—Ä–µ", callback_data="seminar_info"),
# )
# admin_main.add(
#     InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="help_spam_post"),
#     InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ", callback_data="admin_update_promo"),
# )
# admin_main.add(
#     InlineKeyboardButton("–ú—É–∑—ã–∫–∞", callback_data="music_pre_list"),
#     InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É", callback_data="music_pre_add"),
# )


def get_for_all_btn():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å", callback_data="promo_tchr" + "no"))


def get_teacher_pr(name):
    return InlineKeyboardMarkup().add(InlineKeyboardButton("‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å", callback_data="promo_tchr" + name))


def gen_promo_del(pr):
    return InlineKeyboardMarkup().add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="promo_delete" + pr))


def gen_teacher_delete_button(phone):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="admin_teacher_delete_" + phone))
    return kb


def get_teacher_id_button(t_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å", callback_data="teacher_id_" + t_id))
    return kb


def get_teachers_teacher_id_button(t_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å ", callback_data="teachers_teacher_id" + str(t_id)))
    return kb


def gen_admin_delete_button(phone):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_" + phone))
    return kb


def get_event_delete_and_edit_button(event_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"timetable_delete_{event_id}"))
    kb.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event_{event_id}"))
    return kb


def get_event_accept_button(ev_id):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="payments_group_class_" + str(ev_id)))
    return kb


def get_user_phone(user_id):
    kb = InlineKeyboardMarkup()
    phone = db.get_phone_user_by_id(user_id)
    kb.row(InlineKeyboardButton(f"+7{phone}", callback_data="get_user_phone_db_" + str(phone)))
    return kb


def get_balance(abonement_count, one_time_pass_count):
    kb = InlineKeyboardMarkup()
    if abonement_count > 0:
        kb.add(
            InlineKeyboardButton('–í –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –æ—Ç–ª–∞–æ—Å—å "' + str(abonement_count) + '" –∑–∞–Ω—è—Ç–∏–π', callback_data="null")
        )
    if one_time_pass_count > 0:
        kb.add(
            InlineKeyboardButton('–û—Å—Ç–∞–ª–æ—Å—å "' + str(one_time_pass_count) + '" —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π', callback_data="null")
        )
    return kb


def get_pay_ways_button(can_ab, can_ot, cls_id):
    kb = InlineKeyboardMarkup()
    if can_ab != 0:
        kb.add(
            InlineKeyboardButton(
                "–û–ø–ª–∞—Ç–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º (" + str(can_ab) + " –∑–∞–Ω—è—Ç–∏–π)", callback_data="payments_by_ab_" + cls_id
            )
        )
    if can_ot != 0:
        kb.add(
            InlineKeyboardButton(
                "–û–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–∑–æ–≤—ã–º –∑–∞–Ω—è—Ç–∏–µ–º (" + str(can_ot) + " –∑–∞–Ω—è—Ç–∏–π)", callback_data="payments_by_ot_" + cls_id
            )
        )
    return kb


make_event_confirm_teacher = InlineKeyboardMarkup()
make_event_confirm_teacher.row(
    InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="event_confirm_teacher_yes"),
    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="event_confirm_teacher_no"),
)

make_event_confirm_admin = InlineKeyboardMarkup()
make_event_confirm_admin.row(
    InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="event_confirm_admin_yes"),
    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="event_confirm_admin_no"),
)

client_teachers = InlineKeyboardMarkup()
client_teachers.add(InlineKeyboardButton("C–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π", callback_data="teachers_get_list"))

teachers_main_pannel = InlineKeyboardMarkup()
teachers_main_pannel.row(InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π", callback_data="teachers_classes"))
teachers_main_pannel.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="teachers_class_add"))
teachers_main_pannel.row(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ", callback_data="teachers_free_lesson"))


def gen_teacher_panel(tg_id):
    ret = copy.deepcopy(teachers_main_pannel)
    if not db.get_teacher_by_id(tg_id).get().photo:
        ret.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="teachers_change_profile_photo"))
    else:
        ret.row(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="teachers_change_profile_photo"))
    return ret


def get_teacher_pay_close_button(ev_id):
    b = InlineKeyboardMarkup()
    b.add(InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="admin_teacher_pay_confirm" + str(ev_id)))
    return b


def gen_class_link(url):
    b = InlineKeyboardMarkup()
    b.add(InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ zoom", url=url))
    return b


def delete_rescue_button(r_id):
    return InlineKeyboardMarkup().add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="help_delete" + str(r_id)))


def generate_category_keyboard(show_empty=False):
    client_store = InlineKeyboardMarkup()
    for category in db.get_all_categories():
        if show_empty or db.get_products_by_category(category):
            client_store.row(InlineKeyboardButton(category.category, callback_data=f"category_{category.id}"))
    client_store.row(InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', callback_data=f"ppppp_buy_pr_club"))
    return client_store


def generate_curator_keyboard():
    curator_keyboard = InlineKeyboardMarkup()
    for curator in db.get_all_curators():
        curator_keyboard.row(InlineKeyboardButton(curator.username, callback_data=f"curator_{curator.id}"))
    return curator_keyboard


private_club_client_dt = CallbackData('ffdfsffprivate_club_rate', 'rate_id')


def generate_bought_product(user_id):
    products_bought = db.get_products_bought_by_user(user_id)
    products_bought_keyboard = InlineKeyboardMarkup()
    rates = get_user_rate(user_id)
    if len(products_bought) == 0 and len(rates) == 0:
        return None

    for product in products_bought:
        products_bought_keyboard.row(InlineKeyboardButton(f"{product.name}", callback_data=f"bought_{product.id}"))

    for rate in rates:
        products_bought_keyboard.row(
            InlineKeyboardButton(rate.rate.private_club.name,
                                 callback_data=private_club_client_dt.new(rate_id=rate.rate.id)))
    return products_bought_keyboard


def generate_product_keyboard(category, back=True):
    product_store = InlineKeyboardMarkup()
    for products in db.get_products_by_category(category):
        product_store.row(InlineKeyboardButton(f"{products.name}", callback_data=f"product_{products.id}"))
    if back:
        product_store.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="product_back"))

    return product_store


def generate_link_keyboard(product_id) -> Union[InlineKeyboardMarkup, None]:
    product = db.get_product_by_id(product_id)
    link_keyboard = InlineKeyboardMarkup()
    if product.link and product.price:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥–æ–±–Ω–µ–µ‚òù", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å üëâ", callback_data=f"buy_product_{product.id}"))
    elif product.price:
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å üëâ", callback_data=f"buy_product_{product.id}"))
    elif product.link:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥–æ–±–Ω–µ–µ‚òù", url=product.link))
    link_keyboard.add(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"buy_product_back:{product.category}"))
    return link_keyboard


def sale_gold_collection(product_id) -> Union[InlineKeyboardMarkup, None]:
    product = db.get_product_by_id(product_id)
    link_keyboard = InlineKeyboardMarkup()
    if product.link and product.price:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_gold_collection_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    elif product.price:
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_gold_collection_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    elif product.link:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    return link_keyboard


def sale_constructor(product_id) -> Union[InlineKeyboardMarkup, None]:
    product = db.get_product_by_id(product_id)
    link_keyboard = InlineKeyboardMarkup()
    if product.link and product.price:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_constructor_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    elif product.price:
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_constructor_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    elif product.link:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    return link_keyboard


def sale_i_want(product_id) -> Union[InlineKeyboardMarkup, None]:
    product = db.get_product_by_id(product_id)
    link_keyboard = InlineKeyboardMarkup()
    if product.link and product.price:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_i_want_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="third_next"))
    elif product.price:
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_i_want_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    elif product.link:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    return link_keyboard


def generate_letters_keyboard(product_id) -> Union[InlineKeyboardMarkup, None]:
    product = db.get_product_by_id(product_id)
    link_keyboard = InlineKeyboardMarkup()
    if product.link and product.price:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_product_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å", callback_data=f"lesson_waiting"))
    elif product.price:
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"buy_product_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å", callback_data=f"lesson_waiting"))
    elif product.link:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å", callback_data=f"lesson_waiting"))
    return link_keyboard


def generate_constructor_sale_keyboard(product_id) -> Union[InlineKeyboardMarkup, None]:
    product = db.get_product_by_id(42)
    link_keyboard = InlineKeyboardMarkup()
    if product.link and product.price:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_product_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–ª—é –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑", callback_data=f"lesson_third_want"))
    elif product.price:
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_product_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–ª—é –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑", callback_data=f"lesson_third_want"))
    elif product.link:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–ª—é –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑", callback_data=f"lesson_third_want"))
    return link_keyboard


def generate_miracle_sale_keyboard(product_id) -> Union[InlineKeyboardMarkup, None]:
    product = db.get_product_by_id(34)
    link_keyboard = InlineKeyboardMarkup()
    if product.link and product.price:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_miracle_product_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    elif product.price:
        link_keyboard.add(InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"sale_miracle_product_{product.id}"))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    elif product.link:
        link_keyboard.add(InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link))
        link_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    return link_keyboard


def generate_edit_product():
    edit_product = InlineKeyboardMarkup()
    edit_product.row(
        InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="name"),
        InlineKeyboardButton("üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="category"),
    )
    edit_product.row(
        InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="description"),
        InlineKeyboardButton("üóÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="content"),
    )
    edit_product.row(
        InlineKeyboardButton("üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image"),
        InlineKeyboardButton("‚ÜóÔ∏è –°—Å—ã–ª–∫–∞", callback_data="link"),
    )
    edit_product.row(
        InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="price"),
        InlineKeyboardButton("üí∏ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π", callback_data="price_discount"),
    )
    edit_product.row(InlineKeyboardButton("üíª –£—Ä–æ–∫–∏", callback_data="lessons"), )
    return edit_product


def generate_product_lessons(product_id):
    product_lessons = db.get_all_product_lessons_for_product(product_id)
    lesson_keyboard = InlineKeyboardMarkup()
    for product_lesson in product_lessons:
        lesson_keyboard.row(InlineKeyboardButton(f"{product_lesson.order}", callback_data=f"{product_lesson.lesson}"))
    return lesson_keyboard


def generate_edit_lessons():
    edit_lesson = InlineKeyboardMarkup()
    edit_lesson.row(
        InlineKeyboardButton("–ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="content"), InlineKeyboardButton("–§–æ—Ç–æ", callback_data="photo"),
    )
    edit_lesson.row(
        InlineKeyboardButton("–ê–Ω–∏–º–∞—Ü–∏—è", callback_data="gif"),
        InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç", callback_data="document"),
    )
    return edit_lesson


def generate_product_add_lessons_keyboard(product_id):
    product_lesson = InlineKeyboardMarkup()
    product_lesson.row(
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫–∏", callback_data=f"lessons_add_for_product_{product_id}"),
        InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"lessons_skip_for_product_{product_id}"),
    )
    return product_lesson


new_product_and_admin_panel_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_main")],
    ]
)

client_store_classes = InlineKeyboardMarkup()
client_store_classes.row(
    InlineKeyboardButton("üé´ –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data="gn1"),
    InlineKeyboardButton("üíé –ê–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="botshop_buy_aboniment"),
)

client_music = InlineKeyboardMarkup()
client_music.add(InlineKeyboardButton("üßò‚Äç‚ôÇÔ∏è –î–ª—è –π–æ–≥–∏", callback_data="music_foryoga"))
client_music.add(InlineKeyboardButton("üôè –î–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏", callback_data="music_meditaion"))
client_music.add(InlineKeyboardButton("üò¥ –î–ª—è —à–∞–≤–∞—Å–∞–Ω—ã", callback_data="music_shavasana"))

freeze_confirm = InlineKeyboardMarkup()
freeze_confirm.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É", callback_data="help_freeze_confirm"))


def gen_pay_video(lsn, b):
    if not b:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫", callback_data="botshop_video_lesson" + str(lsn))
        )
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫", callback_data="videos_show" + str(lsn))
    )


jobs_kb_data = CallbackData("jobs_data", "job_id")


def generate_jobs_kb(jobs_id: List):
    jobs_kb = InlineKeyboardMarkup()
    for job_id in jobs_id:
        job = scheduler.get_job(job_id=job_id)
        job_time = f"{job.next_run_time.hour}:{job.next_run_time.minute}"
        jobs_kb.row(InlineKeyboardButton(job_time, callback_data=jobs_kb_data.new(job_id=job_id)))
    jobs_kb.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=jobs_kb_data.new(job_id="back")))
    return jobs_kb


manage_job_data = CallbackData("manage_job", "job_id", "prefix")


def generate_manage_job_keyboard(job_id):
    manage_job_id = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=manage_job_data.new(job_id=job_id, prefix="delete"))],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=manage_job_data.new(job_id=job_id, prefix="back"))],
        ]
    )
    return manage_job_id


accept_delete_job_data = CallbackData("accepting_delete_job", "prefix", "job_id")


def generate_accept_delete(job_id):
    accept_delete_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("–î–∞", callback_data=accept_delete_job_data.new(prefix="yes", job_id=job_id))],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data=accept_delete_job_data.new(prefix="no", job_id=job_id))],
        ]
    )
    return accept_delete_kb


def gen_pay_course(lsn, b, num=1, ty="v"):
    if not b:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("üí≥ –∫—É–ø–∏—Ç—å –∫—É—Ä—Å ", callback_data="botshop_course" + str(lsn))
        )
    if num == 0:
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–æ–ª–Ω—ã–π –≤–∏–¥–µ–æ–∫—É—Ä—Å", callback_data="course_show" + str(lsn) + ":1:v")
        )
    if ty == "v":
        return InlineKeyboardMarkup().add(
            InlineKeyboardButton("–¢–µ—Å—Ç –ø–æ –≤–∏–¥–µ–æ", callback_data="course_show" + str(lsn) + ":" + str(num) + ":" + "q")
        )
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data="course_show" + str(lsn) + ":" + str(num) + ":" + ty)
    )


admin_edit_product_course = InlineKeyboardMarkup()
admin_edit_product_course.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å", callback_data=f"add_new_curator_course"))
admin_edit_product_course.row(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å", callback_data=f"delete_curator_course"))

back_keyboard = InlineKeyboardMarkup()
back_keyboard.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_section_curator"))
