import asyncio
import datetime
import logging

from aiogram.types import ParseMode
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated

from modules.Credentials import UTC_TIME_ZONE
from loader import scheduler
from  loader import bot
from modules.BotKeyboards import buy_course, intensive_invite, buy_course_2
from modules.DataBase import (
    get_animation_by_name,
    get_animation_by_name_tg_id,
    get_audio_by_name,
    get_photo_by_name,
    get_photo_by_name_tg_id,
    get_user_by_id,
    get_users_do_not_starting_intensive,
    get_users_for_free_intensive,
    get_users_for_free_intensive_where_day,
    update_user_day_for_free, get_users_friday_vebinar, get_users_friday_vebinar_all,
    change_sended_users_friday_vebinar, is_buy_korset, get_users_fre_intensive_not_buying_korset,
)
from modules.free_intensive.get_markup import get_markup, get_markup_vebinar


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–∫–∏–¥–∫–∏
async def delete_message(message_id, chat_id):
    await bot.delete_message(chat_id=chat_id, message_id=message_id)


async def sending_end_sale(chat_id, text, keyboard, delete=False, gif=None, photo=None, delete_time=1):
    if photo:
        photo = get_photo_by_name_tg_id(photo)
    if gif:
        gif = get_animation_by_name_tg_id(gif)
    if photo:
        try:
            message_photo = await bot.send_photo(chat_id, photo=photo, parse_mode=ParseMode.MARKDOWN)
            if delete:
                delete_date = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=delete_time)
                scheduler.add_job(delete_message, 'date', run_date=delete_date, args=(message_photo.message_id, chat_id,))
        except (ChatNotFound, BotBlocked, UserDeactivated):
            pass
    if gif:
        try:
            message_gif = await bot.send_animation(chat_id, animation=gif, parse_mode=ParseMode.MARKDOWN)
            if delete:
                delete_date = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=delete_time)
                scheduler.add_job(delete_message, 'date', run_date=delete_date, args=(message_gif.message_id, chat_id,))
        except (ChatNotFound, BotBlocked, UserDeactivated):
            pass
    try:
        message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        if delete:
            delete_date = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=delete_time)
            scheduler.add_job(delete_message, 'date', run_date=delete_date, args=(message.message_id, chat_id,))
    except (ChatNotFound, BotBlocked, UserDeactivated):
        pass


async def sending_lesson(day, lesson_text, photo, gif, id, audio):
    if id == 16:
        users_intensive = get_users_fre_intensive_not_buying_korset(day)
    else:
        users_intensive = get_users_for_free_intensive_where_day(day)

    markup = await get_markup(id)
    if photo:
        photo = get_photo_by_name_tg_id(photo)
    if gif:
        gif = get_animation_by_name_tg_id(gif)
    if audio:
        audio = get_audio_by_name(audio)
    if users_intensive:
        for intensive in users_intensive:
            user = get_user_by_id(intensive.user)
            if user:
                if photo:
                    try:
                        await bot.send_photo(chat_id=user.tg_id, caption=lesson_text, photo=photo, reply_markup=markup,
                                             parse_mode=ParseMode.MARKDOWN)
                        await asyncio.sleep(0.1)
                    except (ChatNotFound, BotBlocked, UserDeactivated):
                        logging.warning(f"Impossible to notify {user.tg_id}")
                    continue

                if gif:
                    try:
                        await bot.send_animation(
                            chat_id=user.tg_id, caption=lesson_text, animation=gif, reply_markup=markup,
                            parse_mode=ParseMode.MARKDOWN
                        )
                        await asyncio.sleep(0.1)
                    except (ChatNotFound, BotBlocked, UserDeactivated):
                        logging.warning(f"Impossible to notify {user.tg_id}")
                    continue

                if audio:
                    try:
                        await bot.send_audio(chat_id=user.tg_id, caption=lesson_text, audio=audio, reply_markup=markup,
                                             parse_mode=ParseMode.MARKDOWN)
                        await asyncio.sleep(0.1)
                    except (ChatNotFound, BotBlocked, UserDeactivated):
                        logging.warning(f"Impossible to notify {user.tg_id}")
                    continue

                try:
                    await bot.send_message(chat_id=user.tg_id, text=lesson_text, reply_markup=markup,
                                           parse_mode=ParseMode.MARKDOWN)
                    await asyncio.sleep(0.1)
                except (ChatNotFound, BotBlocked, UserDeactivated):
                    logging.warning(f"Impossible to notify {user.tg_id}")


async def update_users_days():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
    :return: -
    """
    users = get_users_for_free_intensive()
    if users:
        for user in users:
            if user:
                update_user_day_for_free(user)


async def starting_free_intensive():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ–≥–æ –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è —Ä–∞–≤–µ–Ω null –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏–º 1 –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    :return: -
    """
    users = get_users_do_not_starting_intensive()
    for user in users:
        update_user_day_for_free(user)


# –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–µ –≤ –∏–Ω—Ç–µ–Ω—Å–∏–≤
async def process_buy_course(chat_id):
    await asyncio.sleep(10)
    caption_text = (
        "–í–∞—à –∫—Ä–∞—Å–∏–≤—ã–∏ÃÜ –∂–∏–≤–æ—Ç–∏–∫ –∂–¥–µÃà—Ç –≤–∞—Å. –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –≤–∞–º –Ω–∞–∏–ª—É—á—à—É—é "
        "–ø—Ä–æ–≥—Ä–∞–º–º—É. –≠—Ç–æ –º–æ–∏ÃÜ —Ç–æ–ø–æ–≤—ã–∏ÃÜ –ò–Ω—Ç–µ–Ω—Å–∏–≤ ¬´–Ø –ñ–ò–í–∞¬ª. \n\n"
        "üéØ –°—Ç–∞—Ä—Ç –∑–∞–Ω—è—Ç–∏–∏ÃÜ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
        "‚ôÄ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 5 –¥–Ω–µ–∏ÃÜ\n\n"
        "–ß—Ç–æ –≤–∞—Å –∂–¥–µÃà—Ç:\n"
        "‚úî –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç—è–∂–∫–∏ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–∏–∫–∞\n"
        "‚úîÔ∏è–ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∂–µ–Ω—Å–∫–∏—Ö –º—ã—à—Ü\n"
        "‚úîÔ∏è–ú—ã –≤–≤–µ–¥–µÃà–º 10 –º–∏–Ω—É—Ç –∑–∞–Ω—è—Ç–∏–∏ÃÜ –≤ –≤–∞—à—É –∂–∏–∑–Ω—å –ª–µ–≥–∫–æ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º\n"
        "‚úîÔ∏è–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞–≤—Ç—Ä–∞–∫–∏, –≤–≤–µ–¥–µÃà–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∂–∏–≤–æ—Ç–∏–∫–∞\n"
        "‚úîÔ∏è–õ–∏—á–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–∏ÃÜ –¥–µ–≤—É—à–∫–∏.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å 490—Ä –≤–º–µ—Å—Ç–æ 990—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏—à—å –Ω–µ–¥–æ–ª–≥–æ\n\n"
        "[–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube](https://youtu.be/yX1DkxtruX8)"
    )

    photo = get_photo_by_name_tg_id("—è –∂–∏–≤–∞")

    await bot.send_photo(chat_id=chat_id, photo=photo)
    await bot.send_message(chat_id=chat_id, text=caption_text, parse_mode=ParseMode.MARKDOWN, reply_markup=buy_course)
    next_run_date_1 = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=1)
    next_run_date_2 = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=3)
    next_run_date_3 = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=6)
    next_run_date_4 = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=9)
    next_run_date_6 = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=11)
    next_run_date_5 = datetime.datetime.now(UTC_TIME_ZONE) + datetime.timedelta(hours=24)
    text_1 = '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫—É–ø–∏—Ç—å –ò–Ω—Ç–µ–Ω—Å–∏–≤ ¬´—è –ñ–ò–í–∞¬ª –∑–∞ 490 –≤–º–µ—Å—Ç–æ 990 –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 12 —á–∞—Å–æ–≤!\n\n' \
             '–ö–∞—á–∞—Ç—å –ø—Ä–µ—Å—Å –Ω–µ –ø–æ–º–æ–∂–µ—Ç. –ï—Å–ª–∏ –∂–∏–≤–æ—Ç–∏–∫ —Ç–æ—Ä—á–∏—Ç-–Ω—É–∂–Ω—ã –æ—Å–æ–±–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n\n' \
             '–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è 10 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º, –ø–æ–º–µ–Ω—è–π—Ç–µ –∑–∞–≤—Ç—Ä–∞–∫–∏-–∏ –≤–∞—à–µ —Ç–µ–ª–æ –ø—Ä–µ–æ–±—Ä–∞–∑–∏—Ç—Å—è.\n' \
             '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –ï–≤–≥–µ–Ω–∏–∏ ‚¨á‚¨á‚¨á\n\n' \
             'https://youtube.com/shorts/66stblv6ssM'
    text_2 = '–ë–æ–Ω—É—Å—ã-–ø–æ–¥–∞—Ä–∫–∏  üéÅ  —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è üî•üî•\n' \
             'üéÅ–¢–µ—Ö–Ω–∏–∫–∞ –ø–æ–¥—Ç—è–∂–∫–∏ –∫–æ–∂–∏ –∂–∏–≤–æ—Ç–∞\n' \
             'üéÅ–ß–µ–∫-–ª–∏—Å—Ç ¬´–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø–æ–≤—ã—Å–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ –ø—Ä–∏–π—Ç–∏ –≤ —Ä–µ—Å—É—Ä—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª\n' \
             'üéÅ–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ üëå\n\n' \
             '–í—Å—ë —ç—Ç–æ –∂–¥—ë—Ç –≤–∞—Å –±–æ–Ω—É—Å–æ–º –∫ –∫—Ä–∞—Å–∏–≤–æ–º—É –∂–∏–≤–æ—Ç–∏–∫—É- –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è'
    text_3 = '–ö—Ä–∞—Å–∏–≤—ã–π –∂–∏–≤–æ—Ç–∏–∫ –∂–¥—ë—Ç –≤–∞—Å üëåüòâ –û—Å—Ç–∞–ª–æ—Å—å 6 —á–∞—Å–æ–≤ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏!\n' \
             'üí£ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ò–Ω—Ç–µ–Ω—Å–∏–≤—É –ø–æ —Å—Å—ã–ª–∫–µ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è'
    text_4 = '–ö–∞–∫–∏–µ –≤–∞—Å –∂–¥—É—Ç —É—Ä–æ–∫–∏ –Ω–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–µ:\n' \
             '‚úîÔ∏è10-15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å —É—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ ¬´–≤–∫–ª—é—á–∏–ª-–ø–æ–≤—Ç–æ—Ä–∏–ª¬ª\n\n' \
             '–í—ã –Ω–∞—É—á–∏—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –º—ã—à—Ü—ã –∂–∏–≤–æ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –ò —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —É–≤–∏–¥–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ ' \
             '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Ç–∞–ª–∏–∏. '
    text_6 = '–ß–µ—Ä–µ–∑ 1 —á–∞—Å –∞–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–ø–∞–¥—É—Ç, —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç... –û—á–µ–Ω—å —Ö–æ—á—É, ' \
             '—á—Ç–æ–±—ã –≤—ã —É—Å–ø–µ–ª–∏ –∏ –æ–±—Ä–µ–ª–∏ –∫—Ä–∞—Å–∏–≤—ã–π –∂–∏–≤–æ—Ç–∏–∫ –∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ. '
    text_5 = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –º–∞—Ä–∞—Ñ–æ–Ω—É "5 —à–∞–≥–æ–≤ –∫ –∫—Ä–∞—Å–∏–≤–æ–º—É –∂–∏–≤–æ—Ç–∏–∫—É –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤"\n\n' \
             "–°—Ç–∞—Ä—Ç—É–µ–º –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n" \
             "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 5 –¥–Ω–µ–π\n\n" \
             "–ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –æ—Ç –û–∫—Å–∞–Ω—ã –†–æ–≥–≥–µ–ª–∏–Ω, –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏!\n" \
             "[–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube](https://www.youtube.com/watch?v=HH2KDV_52q4&feature=youtu.be)"
    scheduler.add_job(sending_end_sale, 'date',
                      run_date=next_run_date_1,
                      args=(chat_id, text_1, buy_course_2, True, None, '—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —è –∂–∏–≤–∞', 11))
    scheduler.add_job(sending_end_sale, 'date',
                      run_date=next_run_date_2, args=(chat_id, text_2, buy_course_2, True, None, '–±–æ–Ω—É—Å—ã —è –∂–∏–≤–∞', 9))
    scheduler.add_job(sending_end_sale, 'date',
                      run_date=next_run_date_3, args=(chat_id, text_3, buy_course_2, True, '–∫—Ä–∞—Å–∏–≤—ã–π –∂–∏–≤–æ—Ç–∏–∫', None, 6))
    scheduler.add_job(sending_end_sale, 'date',
                      run_date=next_run_date_4, args=(chat_id, text_4, buy_course_2, True, '—É—Å–ø–µ–≤–∞–π', None, 3))
    scheduler.add_job(sending_end_sale, 'date',
                      run_date=next_run_date_6,
                      args=(chat_id, text_6, buy_course_2, True, None, '—è –∂–∏–≤–∞ —á–∞—Å –¥–æ –∫–æ–Ω—Ü–∞ –∞–∫—Ü–∏–∏', 1))
    scheduler.add_job(sending_end_sale, 'date',
                      run_date=next_run_date_5, args=(chat_id, text_5, intensive_invite))


async def sending_message_vebinar(message_text, photo, gif, audio, time_vebinar, id):
    if time_vebinar == 'all':
        users_vebinar = get_users_friday_vebinar_all()
    else:
        users_vebinar = get_users_friday_vebinar(time_vebinar)
    markup = await get_markup_vebinar(id)
    if photo:
        photo = get_photo_by_name_tg_id(photo)
    if gif:
        gif = get_animation_by_name_tg_id(gif)
    if audio:
        audio = get_audio_by_name(audio)
    if users_vebinar:
        for user_vebinar in users_vebinar:
            user = get_user_by_id(user_vebinar.user_id)
            if id == 5:
                change_sended_users_friday_vebinar(user_vebinar.id)
            if user:
                if photo:
                    try:
                        await bot.send_photo(chat_id=user.tg_id, caption=message_text, photo=photo, reply_markup=markup)
                        await asyncio.sleep(0.1)
                    except (ChatNotFound, BotBlocked, UserDeactivated):
                        logging.warning(f"Impossible to notify {user.tg_id}")
                    continue

                if gif:
                    try:
                        await bot.send_animation(
                            chat_id=user.tg_id, caption=message_text, animation=gif, reply_markup=markup
                        )
                        await asyncio.sleep(0.1)
                    except (ChatNotFound, BotBlocked, UserDeactivated):
                        logging.warning(f"Impossible to notify {user.tg_id}")
                    continue

                if audio:
                    try:
                        await bot.send_audio(chat_id=user.tg_id, caption=message_text, audio=audio, reply_markup=markup)
                        await asyncio.sleep(0.1)
                    except (ChatNotFound, BotBlocked, UserDeactivated):
                        logging.warning(f"Impossible to notify {user.tg_id}")
                    continue

                try:
                    await bot.send_message(chat_id=user.tg_id, text=message_text, reply_markup=markup)
                    await asyncio.sleep(0.1)
                except (ChatNotFound, BotBlocked, UserDeactivated):
                    logging.warning(f"Impossible to notify {user.tg_id}")
